npx parcel index.html: means we are executing an npm pacakage parcel and source file is index.html
the command is diff for prod build and dev build
to make our life easier, we will write an script to run the project instead of the large command.
we have to add script in pacakage.json
if you go in company and dont know how to start project, then go to script in package.json



now we will run the project using npm run start or npm start
npm run build: this will build our project. This is how we build the project for production

npm run start = npm start
but for build, it will not work


npm parcel index.html: will not work. npx parcel index.html will work
npx start will also not work. Only npm start will work

//dom element are html element
//React Element: it is an element equivalent to dom element

react element is not an html element

react element is an object at the end of the day
when we render this element onto dom, it becomes an html element.

// react element is an oobject
when we render, then the powerful lib readtdom takes the object and convert it to html and push to browser.


push means it will replace what ever inside root.



React.createElement is not a good way. It is like html inside js
but syntax is bad

so developers created jsx: js syntax to create react element eaisly

jsx is not part of react
we can write react without jsx also


const jsxheading=<h1>Hello Using JSXðŸš€</h1>


//dom element are html element
//React Element: it is an element equivalent to dom element
// react element is an oobject

const jsxheading = <h1 id="heading">Hello Using JSXðŸš€</h1>//jsx //jsx is diff then html //this code is eq to react.createElement code //create react element using jsx

//jsx is html like syntax //xml like syntax

//jsx is react elelemnet? no it's a syntax

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(jsxheading);
console.log(jsxheading); //object same as react.createElement


//now we will use jsx
jsx is not pure javascript

//any js code is understand by js engine
js engine will not understand jsx
js engine understand ecmascript


//js engine not able to read jsx code. Then how it is printed?
parcel doing it's job
even before this code is goes to js enine, it is transpilled be4 it goes to js enine.
js engine recive the code that browser can read
jsx code is transpilleld before it goes to js engine

transpilled: this code is coverted to the code that browser can understand

transpilling is done by parcel;


parcel doesnt do transpilling by itself
it manages everything

parcel using babel for transpilling

//Babel is a JavaScript compiler.
babael not created by facebook



jsx code is transpiled to react.createElement and then it js object. then it is rendered as html element.
jsx is coverted to react elelemnet