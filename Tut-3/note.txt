npx parcel index.html: means we are executing an npm pacakage parcel and source file is index.html
the command is diff for prod build and dev build
to make our life easier, we will write an script to run the project instead of the large command.
we have to add script in pacakage.json
if you go in company and dont know how to start project, then go to script in package.json



now we will run the project using npm run start or npm start
npm run build: this will build our project. This is how we build the project for production

npm run start = npm start
but for build, it will not work


npm parcel index.html: will not work. npx parcel index.html will work
npx start will also not work. Only npm start will work

//dom element are html element
//React Element: it is an element equivalent to dom element

react element is not an html element

react element is an object at the end of the day
when we render this element onto dom, it becomes an html element.

// react element is an oobject
when we render, then the powerful lib readtdom takes the object and convert it to html and push to browser.


push means it will replace what ever inside root.



React.createElement is not a good way. It is like html inside js
but syntax is bad

so developers created jsx: js syntax to create react element eaisly

jsx is not part of react
we can write react without jsx also


const jsxheading=<h1>Hello Using JSXðŸš€</h1>


//dom element are html element
//React Element: it is an element equivalent to dom element
// react element is an oobject

const jsxheading = <h1 id="heading">Hello Using JSXðŸš€</h1>//jsx //jsx is diff then html //this code is eq to react.createElement code //create react element using jsx

//jsx is html like syntax //xml like syntax

//jsx is react elelemnet? no it's a syntax

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(jsxheading);
console.log(jsxheading); //object same as react.createElement


//now we will use jsx
jsx is not pure javascript

//any js code is understand by js engine
js engine will not understand jsx
js engine understand ecmascript


//js engine not able to read jsx code. Then how it is printed?
parcel doing it's job
even before this code is goes to js enine, it is transpilled be4 it goes to js enine.
js engine recive the code that browser can read
jsx code is transpilleld before it goes to js engine

transpilled: this code is coverted to the code that browser can understand

transpilling is done by parcel;


parcel doesnt do transpilling by itself
it manages everything

parcel using babel for transpilling

//Babel is a JavaScript compiler.
babael not created by facebook



jsx code is transpiled to react.createElement and then it js object. then it is rendered as html element.
jsx is coverted to react elelemnet

JSX=>React.createElement=>React element=>JS Object=>transpiled(Babel)=>HTML Element(Rendering)

babel is converting jsx code to react.createElement


jsx is behind the scene react.createElement

babel is a open source js compiler
babel's job is not just to create jsx to react element, it does lot of things
babel is js compiler, transpiller
old browser dont understand js es6 code, babel can change es6 code to older one.
babel is node lib, npm lib
parcel is manager of babel.


jsx is mix of js and html not exact html


when we need to give attribute in jsx, we give it in camelcase. className

//JSX stands for JavaScript XML


tabIndex attribute in html: set priority oder of html leemnt when tab button shift focus
if the jsx in single line it is valid jsx: const jsxheading = <h1 id="heading" className="jsxheading">Hello Using JSXðŸš€</h1>

but if jsx is in multiple line, you have to wrap it inside parenthesis. i.e () round bracket

-why we wrap up, bcs babel need to understand, where jsx started and where jsx ended. if its sinle line, no need

const jsxheading = (<h1 id="heading" className="jsxheading">Hello Using JSXðŸš€</h1>): valid and even without (), it is valid as it is single line jsx

if we write jsx in multiple lines, then () is mandatory

const jsxheading = (<h1 id="heading" className="jsxheading">
Hello Using JSXðŸš€
</h1>):

jsx:babel transpiled it to react.createElement and react.createElement is executed to react element and then it is rendred as html element

in the variable jsxheading, there is an object

react component
everything in react is a component

-class based component - old way
-functional component - new way

functional component is a normal js function
always create a component with capital letter else it will give an error.

function: ()=>

const HeadingComponent=function HeadingComponent{
    
}
const HeadingComponent=()=>{

}

a react functional component is a function that return some piece of jsx element
jsx is a react element
functional component is a js function that return react element


a function that is returning a react element, is a functional component

const fn=()=>true;

const fn2=()=>{
    return true;
}
const fn3=()=>{true};
fn me agar ek line ka statement rahe to no need of {}

these 2 are same

the cool dev write like this

const HeadingComponent=()=><h1 className="heading">Heading by cool devs</h1> //shotcut

const HeadingComponent=()=>(
    <h1>Heading by cool devs</h1> //for multiple line //no need of return. will give error in () this case
);
const HeadingComponent=()=>{
    return <h1>Heading by cool devs</h1>
}

fun componenet can return jsx code or a react element

fun component/jsx can be nested
 const HeadingComponent = () => {
    return <div>
        <h1 className="heading">Hello from fun component</h1>
    </div>
};


const HeadingComponent = () => (
  <div>
        <h1 className="heading">Hello from fun component</h1>
    </div>
);
to make a react component a functional component
-change variable name to capital
add arrow fn or fn


we can not render react fn componenets unlike react elelemnet
root.render(HeadingComponent);
we can render it like: root.render(<HeadingComponent/>); or root.render(<HeadingComponent></HeadingComponent>);

this is the syntax which babel understands.

if we have 2 components and we want to render one component inside another component, we can do it
component composition: nesting one component inside another component.

we can also write normal js fn instead of arrow fn.

const Title=function(){
    return(
        <p className="tit">Hi from normal fn</p>
    )
}

now you will need to return it
its not mandatory to use arrow fn.

inside jsx, if we will put curly braces, we can pur any js expression/variable inside it.
var r=30;
const HeadingComponent = () => {
    return <div>
    {
        //any js expression or variable even console.log
        r //"30" in inspect element //30 on html page
    }
    {r} //variable
        <h1 className="heading">Hello from fun component</h1>
        <Title /> //nested component
    </div>
};

how to put react element inside fn component
as the react element is normal variable so we can put a react element in jsx/fn component same like normal js variable {title}
const title = (
    <p>Hi from react element</p>
)

const HeadingComponent = () => {
    return <div>
        <h1 className="heading">Hello from fun component</h1>
        <h1>{title}</h1>
    </div>
};

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<HeadingComponent />); //Hello from fun component //Hi from react element

how to put react element inside react element
same way like react element in react component

const elm=<span>Hi from react elelement</span>
const title=(
    <h1>
    Hi from react element
     {elm}
    </h1>
     //{elm}: we cannot write like this as we need to wrap element in a container
);


we can also put react component inside react element also
const HeadingComponent = () => (
    <div>
        <h1 className="heading">Hello from fun component</h1>
    </div>
);

const title = (
    <p>
        Hi from react element
        <br />
        <HeadingComponent />
    </p>
);

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(title);


//if we will put creact component in react element and react element in react component, browser will go in infinite loop


//we can put any js code in {}


