igniting our app
//is code in tut 1 was ready to push to production. No: 9:47
//NPM Dont stands for Node Pckage manager. It has not an abbrevation or full form.
//In react app there is NPM already configured in it. We dont need to configure it.
//But here now we will configure it.
//NPM manage packages in react. its a package manager.

//npm is an standrad repository for all the packages.
//when we create react app, it automatically has an npm inside it. We dont have to configure it.
//Now see how to configure it.
//npm init - initialise npm. we will don it instead.
//npm init -y: it will skip lot of things
//in test command write jest for now. we will use jest for testing

//pacakage.json file is a configuration for our npm. all the configuration of our npm.
//why we need pacakge.json file?
/*
sometines this packages are also known as dependencies.
npm will take care of what will the version of that packages.
//suppose if am using some other library or other package. what is the version of that package. npm will take care of it in pacakage.json.
package.json is configuartion for it.
now e can get package or dependencies frominto our project.
now start installing our dependencies.
//now will bundle the package. Bundlers are most important package in our app.

have you heared webpack, parcel or vite? 
these are bundlers which bundels our packages or app to ship it to production.


when we create react app, then it uses webpack bundelers behind the scenes. uses webpack bundelers and bebel behind the scenes.

We will be using parcel.

For installing any pacakges/dependencies, we will have same command. npm install package-name

but will use npm install -D parcel: -D is parameter

there are 2 types of packages that we can install. 1 is dev dependencies and another is normal dependencies. 
bunding done in dev phase, so we will use dev dependencies.


now there will be devdependencies parcel in pacakage.json. 

 "devDependencies": {
    "parcel": "^2.11.0" 
  }

//^: kerret  we can also put tilde~ over here.
diff bw ^ and ~: ^ means update it to minor version i.e latest updates. update dependencies to latest updates. ex: 2.11.7 etc. recommended to use latest version
~: means update dependencies to major version. for example, 3.1.0, 4.1.0: not recommended as it has major changes and updates.





^: means install any version. if there is minor update, install that also.

what is package-lock.json: package-lock.json keeps track of exact version 2.8.3 that is being installed.
pacakge-lock.json locks the verion and keep record of it. i.e exact version of that package/dependecy which is installed.

package.json can have a carrate or tiddle. package.json keeps a approx version of it.

pacakage.lock.json has exact 2.8.3 version which is there.
package.lock.json keeps track of the exact version of all the dependencies.

intergraity: keeps sha2 version of all files and dependecy, module. sha2 for confirmation of file on lock and production to be same.

pacakge.json: approx version, update to minor version also
pacakage.lock.json: exact version

transitent dependency: we only install parcel as dependecy. Parcel as a project has also it's dependency. Parcel takes help of bebel also.



we don't need to put node modules on github. so we put this file path in gitignore file.

we have to push package.json and package.lock.json to github. As it stores version of dependecy.

if we have package.json and pacakge.lock.json, we can recreate node_modules even if it is deleted.
only i have to run npm install. It will again install node_modules.

whatever we can regenerate, don't put it on git.


^: minor update
~: major update



now ignite our app.
npx parcel index.html: ignite the app

npm 
npx parcel something: means executing parcel now. it means executing package now.
npm install means installing the package.


when we do npx parcel index.html: index.html is basically the source.

parcel goes to the source index.html and build a developement build for our app. It build a developement build for our app. it host the developement build to localhost 1234.



now we don't need to use react with cdn.

npm install react: install react. I didn't added -d as i need normal dependency.



npm install react-dom: install react-dom.
npm i react-dom: lot of people do. npm i is short form of npm install.

now we have react and react-dom in our project. no need of cdn

ctrl + c: close the server //if you delete node moule and execute parcel it will throw error. so for installing node_modules, you need to run npm install. For removing error. Just delete .parcel-cache and dist file
npx parcel index.html: execute the html.

now if we use react.createElement, then 1 error will come: Uncaught ReferenceError: React is not defined
so we have installed react inside node, how we will use it inside our code
we will do it using import keyword


again we have errror after importing react and reactdom.
//Browser scripts cannot have imports or exports.
//it thinks that current script is normal js file and it should not have import and export
we have to tell browser that it is not normal js file, it's a module: type="module"

now error will gone and our react element will be rendered



wheneveer we will change anything in any file or save the file, then parcel we reloade the browser.
-feature of parcel
-dev build
-local server
-MR - HOT Module Replacement - auto page reload. If we change naything in file then it automatically refreasing the page.
-file watching algorithm: written in c++
-caching things - faster build due to caching
-image optimization
-minify file in production
-bundle file: parcel is a bundlers
-compress file for production


React is not only thing that is making your application faster
parcel also take help of others. it is manager for other libruary.


-consistent hashing
-code spliting
-diffrential bundling: support old browser. diffrent bundle for diff browser
dignostic
error handling
host you app on https. ssl support
treeshaking - remove unused code for you. suppose we have 100 function and will use 4 only then parcel willl remove extra code in bundling
check from website
diff build for dev and prod.


for dev build: npx parcel build index.html: it will give error. bcs in pacakge.json, "main":"App.js"/"main": "index.js" is entry point but parcel, we defined index.html so remove this line.


it generates dev build. it puts up in dist folder.

parcel, dist and node_modules are temp file, so we don't need to push on github.
we will run npx pparcel index.html and these file will be generated automatically.

now we built prod ready app.

now we will will configure our app for specific browser using browserlist
browserlist is a npm package. it needs some configuration.

you have tell browser what all browser wil support you app.

we have to configure it in package.json

 "browserslist": [
    "last 10 Chrome version",
    "last 2 Firefox version"
  ]


  this means app migh not work in other version of browser but will work in this version of browser.
  we can also configure coutry specific details like 5% in us
  parcel takes care of it along with browserslist


  now we have created our own react app.
*/